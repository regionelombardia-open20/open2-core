<?php
/**
 * Lombardia Informatica S.p.A.
 * OPEN 2.0
 *
 *
 * @package    open20\amos\core\giiamos\model\default
 * @category   CategoryName
 */

/**
 * This is the template for generating the model class of a specified table.
 * DO NOT EDIT THIS FILE! It may be regenerated with Gii.
 *
 * @var yii\web\View $this
 * @var yii\gii\generators\model\Generator $generator
 * @var string $tableName full table name
 * @var string $className class name
 * @var yii\db\TableSchema $tableSchema
 * @var string[] $labels list of attribute labels (name => label)
 * @var string[] $rules list of validation rules
 * @var array $relations list of relations (name => relation declaration)
 */
use yii\helpers\Inflector;

echo "<?php\n";
?>

namespace <?= $generator->ns ?>\base;

use Yii;

/**
* This is the base-model class for table "<?= $tableName ?>".
*
<?php foreach ($tableSchema->columns as $column): ?>
    * @property <?= "{$column->phpType} \${$column->name}\n" ?>
<?php endforeach; ?>
<?php if (!empty($relations)): ?>
    *
    <?php foreach ($relations as $name => $relation): ?>
        * @property \<?= $ns ?>\<?= $relation[1] . ($relation[2] ? '[]' : '') . ' $' . lcfirst($name) . "\n" ?>
    <?php endforeach; ?>
<?php endif; ?>
*/
<?php if ($interfacessel): ?> abstract class <?php else: ?> class <?php endif; ?> <?= $className ?> extends <?= '\\' . ltrim($generator->baseClass, '\\') . "\n" ?>
{
    public $isSearch = false;
<?php
$arrayAttributi = [];
$indx = [];
$elencoAttributi = [];
foreach ((array) $otherRelations as $Relation):
    if ($Relation['fromEntity'] == $tableName):
        $attributoEntita = $Relation['toEntity'];
        if (!(in_array($attributoEntita, $arrayAttributi))):
            $arrayAttributi[] = $attributoEntita;
            $indx[$attributoEntita] = 0;
            $elencoAttributi[$attributoEntita]['required'] = ($Relation['required']) ? 1 : 0;
            $elencoAttributi[$attributoEntita]['descriptorField'] = addslashes($Relation['descriptorField']);
            ?>
            /**
            * @var array Attributo di relazione
            */
            public $attr<?= Inflector::id2camel($attributoEntita, '_') ?>Mm;    
            <?php
        else:
            $indx[$attributoEntita] = $indx[$attributoEntita] + 1;
            $newIndx = $indx[$attributoEntita] - 1;
            $newAttributoEntita = $attributoEntita . $newIndx;
            $elencoAttributi[$newAttributoEntita]['required'] = ($Relation['required']) ? 1 : 0;
            $elencoAttributi[$newAttributoEntita]['descriptorField'] = addslashes($Relation['descriptorField']);
            ?>
            /**
            * @var array Attributo di relazione
            */
            public $attr<?= Inflector::id2camel($newAttributoEntita, '_') ?>Mm;
        <?php
        endif;
    endif;
endforeach;
?>

/**
* @inheritdoc
*/
public static function tableName()
{
return '<?= $tableName ?>';
}

/**
* @inheritdoc
*/
public function rules()
{
return [<?= "\n            " . implode(",\n            ", $rules) ?>,
<?php foreach ((array) $elencoAttributi as $key => $value):
    ?>   
    [['attr<?= Inflector::id2camel($key, '_') ?>Mm'], 'safe'],
    <?php if ($value['required'] == 1): ?>
        [['attr<?= Inflector::id2camel($key, '_') ?>Mm'], 'required'],
        <?php
    endif;
endforeach;
?>
];
}

/**
* @inheritdoc
*/
public function attributeLabels()
{
return [
<?php foreach ($labels as $name => $label): ?>
    <?= "'$name' => " . $generator->generateString($label) . ",\n" ?>
<?php endforeach; ?>
<?php foreach ((array) $elencoAttributi as $key => $value):
    ?>   
    '<?= lcfirst(Inflector::id2camel($key, '_')) ?>' => '<?= ucfirst(addslashes($value['descriptorField'])) ?>',<?= "\n" ?>
    'attr<?= Inflector::id2camel($key, '_') ?>Mm' => '<?= ucfirst(addslashes($value['descriptorField'])) ?>',<?= "\n" ?>
    <?php
endforeach;
?>
];
}
<?php foreach ($relations as $name => $relation): ?>

    /**
    * @return \yii\db\ActiveQuery
    */
    public function get<?= $name ?>()
    {
    <?= $relation[0] . "\n" ?>
    }
<?php endforeach; ?>
<?php
$entita = [];
$indice = [];
foreach ((array) $otherRelations as $Relation):
    if ($Relation['fromEntity'] == $tableName):
        $tabella = $Relation['fromEntity'] . '_' . $Relation['toEntity'] . '_mm';
        if (!(in_array($tabella, $entita) || in_array($Relation['toEntity'] . '_' . $Relation['fromEntity'] . '_mm', $entita))):
            $entita[] = $tabella;
            $indice[$tabella] = 0;
            ?>
            /**
            * @return \yii\db\ActiveQuery
            */
            public function get<?= Inflector::id2camel($Relation['toEntity'], '_') ?>()
            {
            return $this-><?= ($Relation['type'] == 'mtm') ? 'hasMany' : 'hasOne' ?>(\backend\modules\<?= $Relation['toModule'] ?>\models\<?= Inflector::id2camel($Relation['toEntity'], '_') ?>::className(), ['id' => '<?= $Relation['toEntity'] ?>_id'])->via('<?= lcfirst(Inflector::id2camel($Relation['fromEntity'] . '_' . $Relation['toEntity'] . '_mm', '_')) ?>s');
            }
            <?php if ($Relation['type'] == 'mtm') { ?>
                public function getAttr<?= Inflector::id2camel($Relation['toEntity'], '_') ?>Mm($separator = ' '){
                $ritorno = "";
                $ind = 0;
                foreach((array) $this-><?= lcfirst(Inflector::id2camel($Relation['toEntity'], '_')) ?> as $str){
                <?php foreach ($Relation['toFields'] as $field) : ?>
                    $ritorno .= (($ind == 0)? '': ', ') . $str['<?= $field['toFieldName'] ?>'];
                <?php endforeach; ?>
                $ind++;
                }
                return $ritorno;
                }
            <?php } else { ?>
                public function getAttr<?= Inflector::id2camel($Relation['toEntity'], '_') ?>Mm(){
                $ritorno = "";                           
                <?php
                $ind = 0;
                foreach ($Relation['toFields'] as $field) :
                    ?>
                    $ritorno .= '<?= (($ind == 0) ? '' : ' ') ?>' . $this-><?= lcfirst(Inflector::id2camel($Relation['toEntity'], '_')) ?>-><?= $field['toFieldName'] ?>;
                    <?php
                    $ind++;
                endforeach;
                ?>                          
                return $ritorno;
                }
            <?php } ?> 
            <?php
        else:
            $indice[$tabella] = $indice[$tabella] + 1;
            $newIndice = $indice[$tabella] - 1;
            $newTabella = $tabella . $newIndice;
            ?>    
            /**
            * @return \yii\db\ActiveQuery
            */
            public function get<?= Inflector::id2camel($Relation['toEntity'], '_') . $newIndice ?>()
            {
            return $this-><?= ($Relation['type'] == 'mtm') ? 'hasMany' : 'hasOne' ?>(\backend\modules\<?= $Relation['toModule'] ?>\models\<?= Inflector::id2camel($Relation['toEntity'], '_') ?>::className(), ['id' => '<?= $Relation['toEntity'] ?>_id'])->via('<?= lcfirst(Inflector::id2camel($newTabella, '_')) ?>s');
            }
            <?php if ($Relation['type'] == 'mtm') { ?>
                public function getAttr<?= Inflector::id2camel($Relation['toEntity'], '_') . $newIndice ?>Mm($separator = ' '){
                $ritorno = "";
                $ind = 0;
                foreach((array) $this-><?= lcfirst(Inflector::id2camel($Relation['toEntity'], '_')) . $newIndice ?> as $str){
                <?php foreach ($Relation['toFields'] as $field) : ?>
                    $ritorno .= (($ind == 0)? '':', ') . $str['<?= $field['toFieldName'] ?>'];
                <?php endforeach; ?>
                $ind++;
                }
                return $ritorno;
                }
            <?php } else { ?>
                public function getAttr<?= Inflector::id2camel($Relation['toEntity'], '_') . $newIndice ?>Mm(){
                $ritorno = "";                     
                <?php
                $ind = 0;
                foreach ($Relation['toFields'] as $field) :
                    ?>
                    $ritorno .= '<?= (($ind == 0) ? '' : ' ') ?>' . $this-><?= lcfirst(Inflector::id2camel($Relation['toEntity'], '_')) . $newIndice ?>-><?= $field['toFieldName'] ?>;
                    <?php
                    $ind++;
                endforeach;
                ?>
                $ind++;            
                return $ritorno;
                }
            <?php } ?>
        <?php endif; ?>    

        <?php
    endif;
endforeach;
?>
}
