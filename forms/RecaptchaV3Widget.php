<?php
/**
 * Aria S.p.A.
 * OPEN 2.0
 *
 *
 * @package    open20\amos\core\forms
 * @category   CategoryName
 */

namespace open20\amos\core\forms;

use yii\base\InvalidConfigException;
use yii\base\Model;
use yii\base\Widget;
use yii\base\Exception;
use yii\helpers\Html;

/**
 * Class RecaptchaV3Widget
 * @package open20\amos\core\forms
 *
 * Widget that allows inserting a recaptcha v3 in a form.
 */
class RecaptchaV3Widget extends Widget
{

    const RECAPTCHA_JS_URL = '//www.google.com/recaptcha/api.js';
    const RECAPTCHA_RENDER_ACTION = '?render=';

    /**
     * @var Model the data model that this widget is associated with.
     */
    public $model;
    /**
     * @var string the model attribute that this widget is associated with.
     */
    public $attribute;
    /**
     * @var string the input name. This must be set if [[model]] and [[attribute]] are not set.
     */
    public $name;
    /**
     * @var array of the options to be set in the hidden input.
     */
    public $options = [];

    /**
     * @var string
     * The public recaptcha key if needs to be set explicitly when the widget is set in a view
     */
    public $publicKey;

    public function run() {

        /**
         * Checking if the recaptcha secret and public keys exist and are correctly set.
         */
        if(!array_key_exists('recaptchaV3Public', \Yii::$app->params) || is_null(\Yii::$app->params['recaptchaV3Public']) || empty(\Yii::$app->params['recaptchaV3Public'])) {
            if(is_null($this->publicKey) || empty($this->publicKey)) {
                throw new InvalidConfigException("You haven't set any recaptcha v3 public key.\nTo do so, add a new 'recaptchaV3Public' parameter in your params.php file with your public recaptcha site key or set it directly in the widget options.\n\ne.g. 'recaptchaV3Public' => 'your_recaptcha_public_key'\n\nor\n\n\\open20\\amos\\core\\forms\\RecaptchaV3Widget::widget(\n'name' => 'your_hidden_field_name',\n'publicKey' => 'YOUR_RECAPTCHA_PUBLIC_KEY'\n');");
            }
        }

        /**
         * Checking if all required params are set
         */
        if ($this->name === null && !$this->hasModel()) {
            throw new InvalidConfigException("Either 'name', or 'model' and 'attribute' properties must be specified.");
        }

        $view = $this->view;

        /**
         * Setting the public key for the recaptcha js.
         * THE "CUSTOM" PUBLIC KEY SET IN THE OPTION OF THE WIDGET WILL OVERRIDE THE PUBLIC KEY SET IN THE PARAMS!
         */
        $pubKey = '';
        if(!is_null(\Yii::$app->params['recaptchaV3Public']) && !empty(\Yii::$app->params['recaptchaV3Public'])) {
            $pubKey = \Yii::$app->params['recaptchaV3Public'];
        }
        if(!is_null($this->publicKey) && !empty($this->publicKey)) {
            $pubKey = $this->publicKey;
        }

        $viewName = str_replace(' ', '_', str_replace('-', '_', \Yii::$app->controller->action->controller->action->id));

        /**
         * Registering the recaptcha js file from google servers
         */
        $view->registerJsFile(self::RECAPTCHA_JS_URL . self::RECAPTCHA_RENDER_ACTION . $pubKey,
            ['position' => $view::POS_END, 'async' => true, 'defer' => true]);

        /**
         * Registering the recaptcha script into the view
         */
        $view->registerJs(<<<JS
            grecaptcha.ready(function() {
                grecaptcha.execute('$pubKey', {action: '$viewName'}).then(function(token) {
                    $("input[name='{$this->getInputName()}']").val(token);
                });
            });
JS
, $view::POS_LOAD);

        /**
         * Returning the hidden field that stores the token generated by the recaptcha
         */
        return \yii\helpers\Html::hiddenInput($this->getInputName(), null, $this->options);

    }

    /**
     * @return string
     * The input name for the hidden field in the form
     */
    private function getInputName() {
        if ($this->hasModel()) {
            return \yii\helpers\Html::getInputName($this->model, $this->attribute);
        } else {
            return $this->name;
        }
    }

    /**
     * @return bool whether this widget is associated with a data model.
     */
    protected function hasModel()
    {
        return $this->model instanceof Model && $this->attribute !== null;
    }

}